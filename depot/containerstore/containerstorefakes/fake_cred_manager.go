// Code generated by counterfeiter. DO NOT EDIT.
package containerstorefakes

import (
	"sync"
	"time"

	"code.cloudfoundry.org/executor"
	"code.cloudfoundry.org/executor/depot/containerstore"
	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/lager"
	"github.com/tedsuo/ifrit"
)

type FakeCredManager struct {
	CreateCredDirStub        func(lager.Logger, executor.Container) ([]garden.BindMount, []executor.EnvironmentVariable, error)
	createCredDirMutex       sync.RWMutex
	createCredDirArgsForCall []struct {
		arg1 lager.Logger
		arg2 executor.Container
	}
	createCredDirReturns struct {
		result1 []garden.BindMount
		result2 []executor.EnvironmentVariable
		result3 error
	}
	createCredDirReturnsOnCall map[int]struct {
		result1 []garden.BindMount
		result2 []executor.EnvironmentVariable
		result3 error
	}
	RemoveCredDirStub        func(lager.Logger, executor.Container) error
	removeCredDirMutex       sync.RWMutex
	removeCredDirArgsForCall []struct {
		arg1 lager.Logger
		arg2 executor.Container
	}
	removeCredDirReturns struct {
		result1 error
	}
	removeCredDirReturnsOnCall map[int]struct {
		result1 error
	}
	GenerateCredsStub        func(lager.Logger, executor.Container, time.Time, time.Time) (containerstore.Credential, error)
	generateCredsMutex       sync.RWMutex
	generateCredsArgsForCall []struct {
		arg1 lager.Logger
		arg2 executor.Container
		arg3 time.Time
		arg4 time.Time
	}
	generateCredsReturns struct {
		result1 containerstore.Credential
		result2 error
	}
	generateCredsReturnsOnCall map[int]struct {
		result1 containerstore.Credential
		result2 error
	}
	RunnerStub        func(lager.Logger, executor.Container) (ifrit.Runner, <-chan containerstore.Credential)
	runnerMutex       sync.RWMutex
	runnerArgsForCall []struct {
		arg1 lager.Logger
		arg2 executor.Container
	}
	runnerReturns struct {
		result1 ifrit.Runner
		result2 <-chan containerstore.Credential
	}
	runnerReturnsOnCall map[int]struct {
		result1 ifrit.Runner
		result2 <-chan containerstore.Credential
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredManager) CreateCredDir(arg1 lager.Logger, arg2 executor.Container) ([]garden.BindMount, []executor.EnvironmentVariable, error) {
	fake.createCredDirMutex.Lock()
	ret, specificReturn := fake.createCredDirReturnsOnCall[len(fake.createCredDirArgsForCall)]
	fake.createCredDirArgsForCall = append(fake.createCredDirArgsForCall, struct {
		arg1 lager.Logger
		arg2 executor.Container
	}{arg1, arg2})
	fake.recordInvocation("CreateCredDir", []interface{}{arg1, arg2})
	fake.createCredDirMutex.Unlock()
	if fake.CreateCredDirStub != nil {
		return fake.CreateCredDirStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createCredDirReturns.result1, fake.createCredDirReturns.result2, fake.createCredDirReturns.result3
}

func (fake *FakeCredManager) CreateCredDirCallCount() int {
	fake.createCredDirMutex.RLock()
	defer fake.createCredDirMutex.RUnlock()
	return len(fake.createCredDirArgsForCall)
}

func (fake *FakeCredManager) CreateCredDirArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.createCredDirMutex.RLock()
	defer fake.createCredDirMutex.RUnlock()
	return fake.createCredDirArgsForCall[i].arg1, fake.createCredDirArgsForCall[i].arg2
}

func (fake *FakeCredManager) CreateCredDirReturns(result1 []garden.BindMount, result2 []executor.EnvironmentVariable, result3 error) {
	fake.CreateCredDirStub = nil
	fake.createCredDirReturns = struct {
		result1 []garden.BindMount
		result2 []executor.EnvironmentVariable
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCredManager) CreateCredDirReturnsOnCall(i int, result1 []garden.BindMount, result2 []executor.EnvironmentVariable, result3 error) {
	fake.CreateCredDirStub = nil
	if fake.createCredDirReturnsOnCall == nil {
		fake.createCredDirReturnsOnCall = make(map[int]struct {
			result1 []garden.BindMount
			result2 []executor.EnvironmentVariable
			result3 error
		})
	}
	fake.createCredDirReturnsOnCall[i] = struct {
		result1 []garden.BindMount
		result2 []executor.EnvironmentVariable
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCredManager) RemoveCredDir(arg1 lager.Logger, arg2 executor.Container) error {
	fake.removeCredDirMutex.Lock()
	ret, specificReturn := fake.removeCredDirReturnsOnCall[len(fake.removeCredDirArgsForCall)]
	fake.removeCredDirArgsForCall = append(fake.removeCredDirArgsForCall, struct {
		arg1 lager.Logger
		arg2 executor.Container
	}{arg1, arg2})
	fake.recordInvocation("RemoveCredDir", []interface{}{arg1, arg2})
	fake.removeCredDirMutex.Unlock()
	if fake.RemoveCredDirStub != nil {
		return fake.RemoveCredDirStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeCredDirReturns.result1
}

func (fake *FakeCredManager) RemoveCredDirCallCount() int {
	fake.removeCredDirMutex.RLock()
	defer fake.removeCredDirMutex.RUnlock()
	return len(fake.removeCredDirArgsForCall)
}

func (fake *FakeCredManager) RemoveCredDirArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.removeCredDirMutex.RLock()
	defer fake.removeCredDirMutex.RUnlock()
	return fake.removeCredDirArgsForCall[i].arg1, fake.removeCredDirArgsForCall[i].arg2
}

func (fake *FakeCredManager) RemoveCredDirReturns(result1 error) {
	fake.RemoveCredDirStub = nil
	fake.removeCredDirReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredManager) RemoveCredDirReturnsOnCall(i int, result1 error) {
	fake.RemoveCredDirStub = nil
	if fake.removeCredDirReturnsOnCall == nil {
		fake.removeCredDirReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeCredDirReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredManager) GenerateCreds(arg1 lager.Logger, arg2 executor.Container, arg3 time.Time, arg4 time.Time) (containerstore.Credential, error) {
	fake.generateCredsMutex.Lock()
	ret, specificReturn := fake.generateCredsReturnsOnCall[len(fake.generateCredsArgsForCall)]
	fake.generateCredsArgsForCall = append(fake.generateCredsArgsForCall, struct {
		arg1 lager.Logger
		arg2 executor.Container
		arg3 time.Time
		arg4 time.Time
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GenerateCreds", []interface{}{arg1, arg2, arg3, arg4})
	fake.generateCredsMutex.Unlock()
	if fake.GenerateCredsStub != nil {
		return fake.GenerateCredsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateCredsReturns.result1, fake.generateCredsReturns.result2
}

func (fake *FakeCredManager) GenerateCredsCallCount() int {
	fake.generateCredsMutex.RLock()
	defer fake.generateCredsMutex.RUnlock()
	return len(fake.generateCredsArgsForCall)
}

func (fake *FakeCredManager) GenerateCredsArgsForCall(i int) (lager.Logger, executor.Container, time.Time, time.Time) {
	fake.generateCredsMutex.RLock()
	defer fake.generateCredsMutex.RUnlock()
	return fake.generateCredsArgsForCall[i].arg1, fake.generateCredsArgsForCall[i].arg2, fake.generateCredsArgsForCall[i].arg3, fake.generateCredsArgsForCall[i].arg4
}

func (fake *FakeCredManager) GenerateCredsReturns(result1 containerstore.Credential, result2 error) {
	fake.GenerateCredsStub = nil
	fake.generateCredsReturns = struct {
		result1 containerstore.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredManager) GenerateCredsReturnsOnCall(i int, result1 containerstore.Credential, result2 error) {
	fake.GenerateCredsStub = nil
	if fake.generateCredsReturnsOnCall == nil {
		fake.generateCredsReturnsOnCall = make(map[int]struct {
			result1 containerstore.Credential
			result2 error
		})
	}
	fake.generateCredsReturnsOnCall[i] = struct {
		result1 containerstore.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredManager) Runner(arg1 lager.Logger, arg2 executor.Container) (ifrit.Runner, <-chan containerstore.Credential) {
	fake.runnerMutex.Lock()
	ret, specificReturn := fake.runnerReturnsOnCall[len(fake.runnerArgsForCall)]
	fake.runnerArgsForCall = append(fake.runnerArgsForCall, struct {
		arg1 lager.Logger
		arg2 executor.Container
	}{arg1, arg2})
	fake.recordInvocation("Runner", []interface{}{arg1, arg2})
	fake.runnerMutex.Unlock()
	if fake.RunnerStub != nil {
		return fake.RunnerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.runnerReturns.result1, fake.runnerReturns.result2
}

func (fake *FakeCredManager) RunnerCallCount() int {
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	return len(fake.runnerArgsForCall)
}

func (fake *FakeCredManager) RunnerArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	return fake.runnerArgsForCall[i].arg1, fake.runnerArgsForCall[i].arg2
}

func (fake *FakeCredManager) RunnerReturns(result1 ifrit.Runner, result2 <-chan containerstore.Credential) {
	fake.RunnerStub = nil
	fake.runnerReturns = struct {
		result1 ifrit.Runner
		result2 <-chan containerstore.Credential
	}{result1, result2}
}

func (fake *FakeCredManager) RunnerReturnsOnCall(i int, result1 ifrit.Runner, result2 <-chan containerstore.Credential) {
	fake.RunnerStub = nil
	if fake.runnerReturnsOnCall == nil {
		fake.runnerReturnsOnCall = make(map[int]struct {
			result1 ifrit.Runner
			result2 <-chan containerstore.Credential
		})
	}
	fake.runnerReturnsOnCall[i] = struct {
		result1 ifrit.Runner
		result2 <-chan containerstore.Credential
	}{result1, result2}
}

func (fake *FakeCredManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCredDirMutex.RLock()
	defer fake.createCredDirMutex.RUnlock()
	fake.removeCredDirMutex.RLock()
	defer fake.removeCredDirMutex.RUnlock()
	fake.generateCredsMutex.RLock()
	defer fake.generateCredsMutex.RUnlock()
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ containerstore.CredManager = new(FakeCredManager)
